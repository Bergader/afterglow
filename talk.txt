Imagine being able to turn algorithmic ideas into a dazzling
lightscape engulfing you and your audience. That's Afterglow, a
live-coding environment for light shows.

As a software developer who creates electronic music shows as an
avocation, I wanted a way to express my wildest ideas live, in harmony
with music being played. Clojure was the perfect medium for building
my dream tool.

Afterglow has grown from a crazy notion to a hub connecting several
vibrant efforts in new, interesting ways. It can run alone, or hosted
in Cycling '74's Max, a visual environment for experimenting with
music and video. Afterglow translates abstract ideas into the
low-level messages that control lighting fixtures. With the help of
pieces of the Overtone project it powers intuitive control surfaces
and offers beat synchronization with DJ equipment. I couldn't have
achieved this without the expressiveness, interactivity, and
compatibility of the Clojure environment, connecting everything in a
coherent and extensible way.

I'll explain how this open-source project came together, how a Clojure
functional mindset can produce streams of dazzling effects under an
operator's tactile control, and will provide an introduction to the
architecture and implementation of the system.
